package views {	import fl.data.DataProvider;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TextEvent;		import flash.text.StyleSheet;	import flash.text.TextField;		public class TickTock extends Sprite	{		public static const LIST:int = 0;		public static const TIMER:int = 1;		public static const NEW_TASK:int = 2;		public static const NEW_PROJECT:int = 3;		public static const LOGIN:int = 4;				public static const NEW_TASK_LINK:String = "new_task";		public static const NEW_PROJECT_LINK:String = "new_project";		public static const CANCEL_LINK:String = "cancel";				public static const BUTTON_LABELS:Array = [ "Select", "Change" ];		public static const TIMER_LABELS:Array = [ "Start", "Pause" ];				public static const ADD_LABEL:String = 'Add a new <a href="event:' + NEW_PROJECT_LINK + '">Project</a> or <a href="event:' + NEW_TASK_LINK + '">Task</a>';		public static const CANCEL_LABEL:String = 'or <a href="event:' + CANCEL_LINK + '">cancel</a>';				private var panels:Array;		private var current_panel:int;		private var timer_state:int = 1;						public function TickTock( ) {			super( );			panels = [ lists_mc, timer_mc, new_task_mc, new_project_mc, login_mc ];						selection_detail_mc.project_ctrl_btn.addEventListener( MouseEvent.CLICK, togglePanels );			lists_mc.updates_btn.addEventListener( MouseEvent.CLICK, requestUpdates );			timer_mc.timer_btn.addEventListener( MouseEvent.CLICK, toggleTimer );						var btns:Array = [ lists_mc.updates_btn, timer_mc.timer_btn, login_mc.login_btn, 			 new_project_mc.create_btn, new_task_mc.create_btn, selection_detail_mc.project_ctrl_btn ]						for( var i:int = 0; i < btns.length; i++ ) {				assignClicker( btns[i] );			}						lists_mc.project_list.addEventListener( Event.CHANGE, rethrowEvent );			lists_mc.task_list.addEventListener( Event.CHANGE, rethrowEvent );						stage.addEventListener( TextEvent.LINK, showNew );						var styles:StyleSheet = new StyleSheet( );			styles.setStyle( "a", {color:'#000099', textDecoration:'underline'} );			lists_mc.add_txt.styleSheet = styles;			lists_mc.add_txt.htmlText = ADD_LABEL;						new_project_mc.cancel_txt.styleSheet = styles;			new_project_mc.cancel_txt.htmlText = CANCEL_LABEL;						new_task_mc.cancel_txt.styleSheet = styles;			new_task_mc.cancel_txt.htmlText = CANCEL_LABEL;						showPanel( LIST );			toggleTimer( null );		}				private function assignClicker(o:Object, ...rest) { o.addEventListener(MouseEvent.CLICK, rethrowEvent); }				public function showPanel( theVisiblePanel:int ):void {			if( theVisiblePanel < 0 || theVisiblePanel >= panels.length ) throw ArgumentError( "Unexpected panel selection." );						current_panel = theVisiblePanel;			panels.forEach( function( item:*, index:int, array:Array ) { item.visible = (index == current_panel); }, this );						if( current_panel == TIMER || current_panel == LIST )			{				selection_detail_mc.visible = true;				selection_detail_mc.project_ctrl_btn.label = BUTTON_LABELS[current_panel];			}			else			{				selection_detail_mc.visible = false;			}		}				public function get project_task( ):String {			return selection_detail_mc.project_txt.text;		}		public function set project_task( theTask:String ):void {			selection_detail_mc.project_txt.text = theTask;		}						public function get password( ):String {			return login_mc.password_txt.text;		}		public function set password( thePassword:String ):void {			login_mc.password_txt.text = thePassword;		}						public function get username( ):String {			return login_mc.username_txt.text;		}		public function set username( theUsername:String ):void {			login_mc.username_txt.text = theUsername;		}						public function get hostname( ):String {			return login_mc.hostname_txt.text; 		}		public function set hostname( theHostname:String ):void {			login_mc.hostname_txt.text = theHostname;		}						public function get duration( ):String {			return timer_mc.duration_txt.text;		}		public function set duration( theDuration:String ):void {			timer_mc.duration_txt.text = theDuration;		}						public function get new_project_name( ):String {			return new_project_mc.name_txt.text;		}		public function set new_project_name( theProjectName:String ):void {			new_project_mc.name_txt.text = theProjectName;		}						public function get new_project_task( ):String {			return new_task_mc.task_txt.text;		}		public function set new_project_task( theTask:String ):void {			new_task_mc.task_txt.text = theTask;		}						public function get notes( ):String {			return timer_mc.notes_ta.text;		}		public function set notes( theNotes:String ):void {			timer_mc.notes_ta.text = theNotes;		}						public function get project_list( ):DataProvider {			return lists_mc.project_list.dataProvider;		}		public function set project_list( theDataProvider:DataProvider ):void {			lists_mc.project_list.dataProvider = theDataProvider;		}						public function get task_list( ):DataProvider {			return lists_mc.task_list.dataProvider;		}		public function set task_list( theDataProvider:DataProvider ):void {			lists_mc.task_list.dataProvider = theDataProvider;		}				// ===== LISTENERS =====================================================		private function rethrowEvent( e:Event ):void {			trace( e.target.name );			dispatchEvent( e );		}				private function showNew( e:TextEvent ):void {			var choice:int = 0;						switch( e.text )			{				case NEW_PROJECT_LINK:					showPanel( NEW_PROJECT );					break;									case NEW_TASK_LINK:					showPanel( NEW_TASK );					break;									case CANCEL_LINK:					showPanel( LIST );					break;			}		}						private function requestUpdates( e:MouseEvent ):void {				}						private function toggleTimer( e:MouseEvent ):void {			timer_state = (timer_state) ? 0 : 1;						timer_mc.timer_btn.label = TIMER_LABELS[timer_state];		}						private function togglePanels( e:MouseEvent ):void {			if( current_panel == LIST )			{				showPanel( TIMER );			}			else			{				showPanel( LIST );			}		}	}}